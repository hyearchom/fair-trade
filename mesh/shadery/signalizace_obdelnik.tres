[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://cqds6wj05y3yw"]

[sub_resource type="Shader" id="Shader_n5utn"]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_never,cull_back,unshaded;

uniform vec3 albedo : source_color;
uniform float vysek: hint_range(0.0, 0.5, 0.05) = 0.4;


void vertex() {
	MODELVIEW_MATRIX = VIEW_MATRIX * mat4(
		INV_VIEW_MATRIX[0], 
		INV_VIEW_MATRIX[1], 
		INV_VIEW_MATRIX[2], 
		MODEL_MATRIX[3]);
	MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(
		vec4(length(MODEL_MATRIX[0].xyz), 0.0, 0.0, 0.0), 
		vec4(0.0, length(MODEL_MATRIX[1].xyz), 0.0, 0.0), 
		vec4(0.0, 0.0, length(MODEL_MATRIX[2].xyz), 0.0), 
		vec4(0.0, 0.0, 0.0, 1.0));
	MODELVIEW_NORMAL_MATRIX = mat3(MODELVIEW_MATRIX);
	if (PROJECTION_MATRIX[3][3] != 0.0) {
		float h = abs(1.0 / (2.0 * PROJECTION_MATRIX[1][1]));
		float sc = (h * 2.0); //consistent with Y-fov
		MODELVIEW_MATRIX[0]*=sc;
		MODELVIEW_MATRIX[1]*=sc;
		MODELVIEW_MATRIX[2]*=sc;
	} else {
		float sc = -(MODELVIEW_MATRIX)[3].z;
		MODELVIEW_MATRIX[0]*=sc;
		MODELVIEW_MATRIX[1]*=sc;
		MODELVIEW_MATRIX[2]*=sc;
	}
}


void fragment() {
	//vykreslení obdelníku
	ALBEDO = albedo;
	if (abs(UV.x -0.5) <= vysek && abs(UV.y -0.5) <= vysek){
		ALPHA = 0.0;
		}
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_n5utn")
shader_parameter/albedo = Color(0.976471, 0.490196, 0.176471, 1)
shader_parameter/vysek = 0.4
